#N canvas 256 30 668 776 10;
#X text 51 13 c_adsr: ADSR ENVELOPE;
#X text 85 151 When you send this patch a positive trigger it schedules
a line~ to do an attack and decay \, and if zero \, it starts the release
ramp.;
#X text 86 204 Negative triggers cause the output to jump to zero and
then attack (instead of attacking from the current location).;
#X obj 196 357 / 127;
#N canvas 0 0 450 300 (subpatch) 0;
#X array \$0-adsr 44100 float 2;
#X coords 0 1 44100 -1 200 140 1;
#X restore 118 558 graph;
#X obj 119 513 tabwrite~ \$0-adsr;
#X obj 87 292 t a b;
#X msg 87 270 80;
#X obj 87 335 makenote 100 400;
#X obj 196 383 t a a;
#X floatatom 141 311 5 0 0 2 velocity - -;
#X floatatom 256 290 5 0 0 1 A - -;
#X floatatom 286 315 5 0 0 1 D - -;
#X floatatom 316 343 5 0 0 1 S(%) - -;
#X floatatom 347 368 5 0 0 1 R - -;
#X text 85 46 This is the classical Miller S. Puckette linear ADSR
envelope \, but with vline~ instead of line~ inside for a bit of extra
timing accuracy.;
#X text 86 102 Arguments: peak level \, attack time \, decay time \,
sustain level \, release time. A \, D \, and R are in msec and S is
in percent!;
#N canvas 0 0 450 300 (subpatch) 0;
#X array \$0-adsr-quartic 44100 float 2;
#X coords 0 1 44100 -1 200 140 1;
#X restore 347 558 graph;
#X obj 347 518 tabwrite~ \$0-adsr-quartic;
#X obj 119 449 t b b;
#X obj 345 465 *~;
#X obj 346 494 *~;
#X obj 196 411 c_adsr 1 80 100 80 200;
#X text 385 473 simple curved envelope;
#X connect 3 0 9 0;
#X connect 6 0 8 0;
#X connect 6 1 19 0;
#X connect 7 0 6 0;
#X connect 8 1 3 0;
#X connect 9 0 22 0;
#X connect 9 1 22 1;
#X connect 10 0 8 1;
#X connect 11 0 22 2;
#X connect 12 0 22 3;
#X connect 13 0 22 4;
#X connect 14 0 22 5;
#X connect 19 0 5 0;
#X connect 19 1 18 0;
#X connect 20 0 21 0;
#X connect 20 0 21 1;
#X connect 21 0 18 0;
#X connect 22 0 5 0;
#X connect 22 0 20 0;
#X connect 22 0 20 1;
